# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kmC5fr-4bj7V7AVQqxNUvZXO6nbMaHpL
"""

from keras.datasets import mnist

(X_train, y_train), (X_test, y_test) = mnist.load_data()

import matplotlib.pyplot as plt
#plot the first image in the dataset
plt.imshow(X_train[0])

X_train[0].shape

X_train = X_train.reshape(60000,28,28,1)
X_test = X_test.reshape(10000,28,28,1)

from keras.utils import to_categorical
#one-hot encode target column
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)
y_train[0]

from keras.preprocessing.image import ImageDataGenerator
 
Augmented_Data = ImageDataGenerator(width_shift_range=0.1,
                            height_shift_range=0.1,
                            zoom_range=0.2,
                            shear_range=0.1,
                            rotation_range=10.)
 
Augmented_Data.fit(X_train)

 
Collection = Augmented_Data.flow(X_train, y_train, batch_size = 15)

features_collection, labels_collection = next(Collection)

 
figure, axes = plt.subplots(1, 15, figsize=(20, 5))
figure.tight_layout()
 
for i in range(15):
    axes[i].imshow(features_collection[i].reshape(28, 28))
    axes[i].axis("off")
 
print(features_collection.shape)

from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten
#create model
model = Sequential()
#add model layers
model.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28,28,1)))
model.add(Conv2D(32, kernel_size=3, activation='relu'))
model.add(Conv2D(16, kernel_size=3, activation='relu'))
model.add(Flatten())
model.add(Dense(10, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

History_Model = model.fit_generator(Augmented_Data.flow(X_train, y_train, batch_size=10),
                            steps_per_epoch=500,
                            epochs=3,
                            validation_data=(X_test, y_test), shuffle = 1)